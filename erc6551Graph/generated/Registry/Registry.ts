// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccountCreated extends ethereum.Event {
  get params(): AccountCreated__Params {
    return new AccountCreated__Params(this);
  }
}

export class AccountCreated__Params {
  _event: AccountCreated;

  constructor(event: AccountCreated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get implementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get chainId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenContract(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get salt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Registry extends ethereum.SmartContract {
  static bind(address: Address): Registry {
    return new Registry("Registry", address);
  }

  account(
    implementation: Address,
    chainId: BigInt,
    tokenContract: Address,
    tokenId: BigInt,
    salt: BigInt
  ): Address {
    let result = super.call(
      "account",
      "account(address,uint256,address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(implementation),
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salt)
      ]
    );

    return result[0].toAddress();
  }

  try_account(
    implementation: Address,
    chainId: BigInt,
    tokenContract: Address,
    tokenId: BigInt,
    salt: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "account",
      "account(address,uint256,address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(implementation),
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createAccount(
    implementation: Address,
    chainId: BigInt,
    tokenContract: Address,
    tokenId: BigInt,
    salt: BigInt,
    initData: Bytes
  ): Address {
    let result = super.call(
      "createAccount",
      "createAccount(address,uint256,address,uint256,uint256,bytes):(address)",
      [
        ethereum.Value.fromAddress(implementation),
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salt),
        ethereum.Value.fromBytes(initData)
      ]
    );

    return result[0].toAddress();
  }

  try_createAccount(
    implementation: Address,
    chainId: BigInt,
    tokenContract: Address,
    tokenId: BigInt,
    salt: BigInt,
    initData: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createAccount",
      "createAccount(address,uint256,address,uint256,uint256,bytes):(address)",
      [
        ethereum.Value.fromAddress(implementation),
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salt),
        ethereum.Value.fromBytes(initData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateAccountCall extends ethereum.Call {
  get inputs(): CreateAccountCall__Inputs {
    return new CreateAccountCall__Inputs(this);
  }

  get outputs(): CreateAccountCall__Outputs {
    return new CreateAccountCall__Outputs(this);
  }
}

export class CreateAccountCall__Inputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }

  get implementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get chainId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get salt(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get initData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class CreateAccountCall__Outputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
